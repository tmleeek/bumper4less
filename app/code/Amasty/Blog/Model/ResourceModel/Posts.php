<?php
/**
 * @author Amasty Team
 * @copyright Copyright (c) 2017 Amasty (https://www.amasty.com)
 * @package Amasty_Blog
 */

namespace Amasty\Blog\Model\ResourceModel;
use Magento\Framework\Exception\AlreadyExistsException;
use Magento\Framework\Exception\ValidatorException;
use Magento\Framework\Model\AbstractModel;

class Posts extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
{
    protected $_force = false;
    /**
     * @var \Amasty\Blog\Model\Tags
     */
    private $tagsModel;
    /**
     * @var \Amasty\Blog\Helper\Url
     */
    private $urlHelper;
    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    private $storeManagerInterface;

    public function __construct(
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        \Amasty\Blog\Model\Tags $tagsModel,
        \Magento\Store\Model\StoreManagerInterface $storeManagerInterface,
        \Amasty\Blog\Helper\Url $urlHelper,
        $connectionName = null
    ) {
        parent::__construct($context, $connectionName);
        $this->tagsModel = $tagsModel;
        $this->urlHelper = $urlHelper;
        $this->storeManagerInterface = $storeManagerInterface;
    }

    public function _construct()
    {
        $this->_init('amasty_blog_posts', 'post_id');
    }

    public function getTags($postId)
    {
        $select = $this->getConnection()->select()
            ->from(
                ['posts_tags' => $this->getTable('amasty_blog_posts_tag')],
                ['tag_id', 'tags.name']
            )
            ->joinLeft(
                ['tags' => $this->getTable('amasty_blog_tags')],
                'posts_tags.tag_id = tags.tag_id',
                ['tags.name']
            )
            ->where('posts_tags.post_id = :post_id');

        return $this->getConnection()->fetchPairs($select, [':post_id' => $postId]);
    }

    public function getStores($postId)
    {
        $select = $this->getConnection()->select()
            ->from(
                [$this->getTable('amasty_blog_posts_store')],
                ['post_id', 'store_id']
            )
            ->where('post_id = :post_id');

        return $this->getConnection()->fetchAll($select, [':post_id' => $postId]);
    }

    public function getCategories($postId)
    {
        $select = $this->getConnection()->select()
            ->from(
                ['posts_cats' => $this->getTable('amasty_blog_posts_category')],
                ['post_id', 'category_id']
            )
            ->joinLeft(
                ['cats' => $this->getTable('amasty_blog_categories')],
                'posts_cats.category_id = cats.category_id',
                ['cats.name']
            )
            ->where('posts_cats.post_id = :post_id');

        return $this->getConnection()->fetchAll($select, [':post_id' => $postId]);
    }

    public function getPostsByTag($tagId)
    {
        $select = $this->getConnection()->select()
            ->from(
                ['posts' => $this->getTable('amasty_blog_posts')],
                ['post_id', 'title', 'url_key']
            )
            ->joinLeft(
                ['posts_tag' => $this->getTable('amasty_blog_posts_tag')],
                'posts.post_id = posts_tag.tag_id',
                []
            )
            ->where('posts_tag.tag_id = :tag_id');

        return $this->getConnection()->fetchAll($select, [':tag_id' => $tagId]);
    }

    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)
    {
        if (!$this->_validateUrlKey($object) && ($object->getStatus() != \Amasty\Blog\Model\Posts::STATUS_DISABLED)){
            $object->setStatus(\Amasty\Blog\Model\Posts::STATUS_DISABLED);

            throw new AlreadyExistsException(__("Post '%1' can be disabled only. Some post has same Url Key for the same Store View.", $object->getTitle()));
        }

        return parent::_beforeSave($object); // TODO: Change the autogenerated stub
    }

    protected function _validateUrlKey($object)
    {

        $store = $object->getStores();
        if (!is_array($store)){
            $store = array($store);
        }

        $connection = $this->getConnection();
        $bind = ['url_key' => $object->getUrlKey()];

        $select = $connection->select()->from(
            ['main_table' => $this->getMainTable()],
            [$this->getIdFieldName()]
        )->joinLeft(
            ['store' => $this->getTable('amasty_blog_posts_store')],
            'main_table.post_id = store.post_id',
            ['store.store_id']
        )->where(
            'main_table.url_key = :url_key'
        );

        if ($object->getId()) {
            $bind['post_id'] = (int)$object->getId();
            $select->where('store.post_id != :post_id');
        }

        $bind['store_id'] = implode(', ', $store);
        $select->where('store.store_id IN (:store_id)');

        $result = $connection->fetchOne($select, $bind);
        if ($result !== false) {
            throw new AlreadyExistsException(
                __('A post with the same url key already exists.')
            );
        }
        return true;
    }

    /**
     * Perform actions after object save
     *
     * @param \Magento\Framework\Model\AbstractModel $object
     * @return $this
     */
    protected function _afterSave(AbstractModel $object)
    {
        $connection = $this->getConnection();

        $this->saveTags($object, $connection);
        $this->saveStores($object, $connection);
        $this->saveCategories($object, $connection);
    }

    /**
     * @param \Magento\Framework\Model\AbstractModel $object
     * @param \Magento\Framework\DB\Adapter\AdapterInterface $connection
     */
    protected function saveStores($object, $connection)
    {
        $stores = $object->getStores();
        if (!empty($stores)) {
            $condition = ['post_id = ?' => $object->getId()];
            $connection->delete($this->getTable('amasty_blog_posts_store'), $condition);

            $insertedStoreIds = [];
            foreach ($stores as $storeId) {
                if (in_array($storeId, $insertedStoreIds)) {
                    continue;
                }

                $insertedStoreIds[] = $storeId;
                $storeInsert = ['store_id' => $storeId, 'post_id' => $object->getId()];
                $connection->insert($this->getTable('amasty_blog_posts_store'), $storeInsert);
            }
        }
    }

    /**
     * @param \Magento\Framework\Model\AbstractModel $object
     * @param \Magento\Framework\DB\Adapter\AdapterInterface $connection
     */
    protected function saveTags($object, $connection)
    {
        $tags = $object->getData('tags');
        if (!empty($tags)) {
            $condition = ['post_id = ?' => $object->getId()];
            $connection->delete($this->getTable('amasty_blog_posts_tag'), $condition);
            $tagsArray = explode(',', $tags);
            $tagsList = $this->tagsModel->getTagsListByNames($tagsArray);
            $existTags = [];
            foreach ($tagsList as $tag) {
                $existTags[$tag->getId()] = $tag->getName();
            }
            foreach ($tagsArray as $tag) {
                //insert exist tag or create new tag
                $this->tagsModel->setData([])->isObjectNew(false);
                if (in_array($tag, $existTags)) {
                    $tagInsert = ['tag_id' => array_search($tag, $existTags), 'post_id' => $object->getId()];
                    $connection->insert($this->getTable('amasty_blog_posts_tag'), $tagInsert);
                } else {
                    $newTag = ['name'=>$tag];
                    $this->tagsModel->setData($newTag)->save();
                    $id = $this->tagsModel->getId();
                    $tagInsert = ['tag_id' => $id, 'post_id' => $object->getId()];
                    $connection->insert($this->getTable('amasty_blog_posts_tag'), $tagInsert);
                }
            }
        }
    }

    /**
     * @param \Magento\Framework\Model\AbstractModel $object
     * @param \Magento\Framework\DB\Adapter\AdapterInterface $connection
     */
    protected function saveCategories($object, $connection)
    {
        $cats = $object->getCategories();
        if (!empty($cats)) {
            $condition = ['post_id = ?' => $object->getId()];
            $connection->delete($this->getTable('amasty_blog_posts_category'), $condition);

            $insertedIds = [];
            foreach ($cats as $catId) {
                if (in_array($catId, $insertedIds)) {
                    continue;
                }
                $insertedIds[] = $catId;
                $insert = ['category_id' => $catId, 'post_id' => $object->getId()];
                $connection->insert($this->getTable('amasty_blog_posts_category'), $insert);
            }
        }
    }

    public function forceSave()
    {
        $this->_force = true;
        return $this;
    }
}
